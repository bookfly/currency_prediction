cmdhistory=["(require '[clj-http.client \:as client])" "(client/get \\"http\://google.com\\")\\n\=> {\:status 200\\n    \:headers {\\"Date\\" \\"Sun, 01 Aug 2010 07\:03\:49 GMT\\"\\n              \\"Cache-Control\\" \\"private, max-age\=0\\"\\n              \\"Content-Type\\" \\"text/html; charset\=ISO-8859-1\\"\\n              ...}\\n    \:body \\"<\!doctype html>...\\"\\n    \:cookies {\\"PREF\\" {\:domain \\".google.com\\", \:expires \#<Date Wed Apr 02 09\:10\:22 EDT 2014>, \:path \\"/\\", \:value \\"...\\", \:version 0}}\\n    \:trace-redirects [\\"http\://google.com\\" \\"http\://www.google.com/\\" \\"http\://www.google.fr/\\"]}" "\\n\\n(require '[clj-http.client \:as client])" "(client/get \\"http\://google.com\\")" "(require '[clojure.string \:as str])" "\\r\\n\\r\\nuser\=> (str/split \\"Clojure is awesome\!\\" \#\\" \\")" "\\n(str/split \\"Clojure is awesome\!\\" \#\\" \\")" "(1 2 3)" "(+ 2 3)" "(autotest)" "(+ 3 2)" "dd" "d" "(make-map [\\"2012-06-02 117.593703915\\"])" "[1 2 3] \= [1, 2, 3]" "\=" "(+ 1 2\\n   )" "(defn square-root\\r\\n  ([c] (square-root c 1e-15))\\r\\n  ([c epsilon]\\r\\n     (loop [t (double c)]\\r\\n       (if (float\= t (/ c t) epsilon)\\r\\n         t\\r\\n         (recur (double (/ (+ t (/ c t)) 2)))) )))" "(defn square-root\\r\\n  ([c] (square-root c 1e-15))\\r\\n  ([c epsilon]\\r\\n     (loop [t (double c)]\\r\\n       (if (float \= t (/ c t) epsilon)\\r\\n         t\\r\\n         (recur (double (/ (+ t (/ c t)) 2)))) )))" "(+ 1 2\\n   )" "(+ 1 2)" " (require '(clj-time [format \:as f]))" "(def string-date \\"18 September 2012\\")" "(f/parse (f/formatter \\"dd MMM YYYY\\") string-date)" "(f/show-formatters)" "(f/parse (f/formatter\:date) string-date)" "(f/parse (f\:date) string-date)" "(f/parse (f/formatter [\:date]) string-date)" "(f/parse (f/formatter \:date) string-date)" "(parse (formatters \:date-time-no-ms) \\"2013-02-20T17\:24\:33Z\\")" "(f/parse (formatters \:date-time-no-ms) \\"2013-02-20T17\:24\:33Z\\")" "(use 'clj-time.format)" "(parse (formatters \:date-time-no-ms) \\"2013-02-20T17\:24\:33Z\\")" "(parse (formatters \:date) \\"2013-02-20T17\:24\:33Z\\")" "(parse (formatters \:date) \\"18 September 2012\\")" "(parse (formatters \:date) \\"2012-06-02\\")" "(parse (formatter \:date) \\"2012-06-02\\")" "(parse (formatters \:date) \\"2012-06-02\\")" "\\n(require '[clj-time.core \:as time]\\r\\n         '[clj-time.coerce \:as tc])" "(tc/to-long (time/now))" "(tc)" "(f/show-formatters)" "(let [start-time (t/now)]\\r\\n  ... do lots of work ...\\r\\n  (time/in-millis (time/interval start-time (time/now))))" "(let [start-time (time/now)]\\r\\n  ... do lots of work ...\\r\\n  (time/in-millis (time/interval start-time (time/now))))" "(let [start-time (time/now)]\\r\\n  (time/in-millis (time/interval start-time (time/now))))" "(c/to-long \\"2013-08-01\\")" "(clj-time.coerce/to-long \\"2013-08-01\\")" "(time/in-days (time/interval (time/date-time 2012 02 28)\\r\\n                       (time/date-time 2012 03 01)))" "(time/in-days (time/interval (time/date-time \\"2012 02 28\\")\\r\\n                       (time/date-time \\"2012 03 01)))" "(time/in-days (time/interval (time/date-time \\"2012 02 28\\")\\r\\n                       (time/date-time \\"2012 03 01\\")))" "(time/in-days (time/interval (time/date-time (tc/to-date \\"2012-02-28\\"))\\r\\n                       (time/date-time (tc/to-date \\"2012-03-01\\"))))" "(tc/to-date \\"2012-03-01\\")" "(tc/to-sql-date \\"2012-03-01\\")" "(time/date-time \\"2012-03-01\\")" "(time/date-time 2012 03 01)" "(tc/to-date \\"2012-03-01\\")" " (in-minutes (interval (date-time 1986 10 2) (date-time 1986 10 14)))" " (time/in-minutes (time/interval (time/date-time 1986 10 2) (time/date-time 1986 10 14)))" " (time/in-minutes (time/interval (time/date-time 1970 1 1) (time/date-time 1986 10 14)))" " (time/in-minutes (time/interval (time/date-time 1970 1 1) (time/date-time 2015 3 5)))" " (time/in-days (time/interval (time/date-time 1970 1 1) (time/date-time 2015 3 5)))" " (time/in-days (time/interval (time/date-time (get-epoch-date)) (time/date-time 2015 3 5)))" " (time/in-days (time/interval (get-epoch-date) (time/date-time 2015 3 5)))" " (time/in-days (time/interval (get-epoch-date) (time/date-time 2014 3 5)))" " (time/in-days (time/interval (get-epoch-date) (get-date-of-date \\"2015-03-05\\")))" " (time/in-days (time/interval (get-epoch-date) (get-date-of-date \\"2014-03-05\\")))" "(for [x [0 1 2 3 4 5]\\r\\n      \:let [y (* x 3)]\\r\\n      \:when (even? y)]\\r\\n  y)" "(for [x [0 1 2 3 4 5]\\r\\n      \:let [y (* x 3)]\\r\\n      ]\\r\\n  y)" " (iterate inc 5)" "(take 5 (iterate inc 5))" "(+ 1 2)" "(iterate inc 0)" "(+ 1 2)" "(take 5 (iterate inc 5))" "(+ 1 2)" "(assoc [1 2 3] 0 10)" "System.getProperty(\\"os.arch\\")" "(str \\"Jelena\\" \\" je \\" \\" kul.\\")"]
eclipse.preferences.version=1
